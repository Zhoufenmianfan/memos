name: Build Memos Windows x64

on:
  workflow_dispatch:
    inputs:
      release:
        description: "是否发布到 Release"
        type: boolean
        required: false
        default: false
      version:
        description: "Release 标签名（如 v0.15.2），当 release=true 时必填"
        type: string
        required: false
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.21.x"
          cache: true

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          check-latest: true

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup buf
        uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          version: 1.26.1

      - name: Generate Protobuf (if present and valid)
        if: ${{ hashFiles('proto/buf.yaml') != '' || hashFiles('proto/buf.gen.yaml') != '' }}
        shell: pwsh
        run: |
          $genPath = "proto/buf.gen.yaml"
          if (Test-Path $genPath) {
            $content = Get-Content $genPath -Raw
            if ($content -notmatch '(?m)^version:\s*v1\s*$') {
              Write-Host "buf.gen.yaml missing 'version: v1', skip buf generate"
              exit 0
            }
          }
          Set-Location proto
          buf generate

      - name: Tool versions
        run: |
          go version
          node -v
          pnpm -v
          if (Get-Command buf -ErrorAction SilentlyContinue) { buf --version } else { echo "buf not installed or not in PATH" }

      - name: Verify pnpm
        run: pnpm --version

      - name: Install frontend deps
        working-directory: web
        run: |
          pnpm install --no-frozen-lockfile

      - name: Build frontend
        working-directory: web
        run: pnpm build

      - name: Prepare server dist
        run: |
          if (Test-Path 'server\dist') { Remove-Item -Recurse -Force 'server\dist' }
          New-Item -ItemType Directory -Force -Path 'server\dist' | Out-Null
          Copy-Item -Recurse -Force 'web\dist\*' 'server\dist\'

      - name: Build backend (Windows x64)
        env:
          CGO_ENABLED: 0
          GOOS: windows
          GOARCH: amd64
        run: |
          go build -v -o .\memos-windows-amd64.exe .\server

      - name: Package zip
        id: package
        run: |
          $pkgDir = "package-amd64"
          if (Test-Path $pkgDir) { Remove-Item -Recurse -Force $pkgDir }
          New-Item -ItemType Directory -Force -Path $pkgDir | Out-Null
          Copy-Item -Force "memos-windows-amd64.exe" "$pkgDir/"
          New-Item -ItemType Directory -Force -Path "$pkgDir/server/dist" | Out-Null
          Copy-Item -Recurse -Force "server/dist/*" "$pkgDir/server/dist/"
          $zip = "memos-windows-amd64.zip"
          if ($env:GITHUB_REF -like 'refs/tags/*') {
            $zip = "memos-windows-amd64-$($env:GITHUB_REF_NAME).zip"
          }
          if ($env:GITHUB_EVENT_NAME -eq 'workflow_dispatch' -and '${{ github.event.inputs.release }}' -eq 'true' -and '${{ github.event.inputs.version }}' -ne '') {
            $zip = "memos-windows-amd64-${{ github.event.inputs.version }}.zip"
          }
          Compress-Archive -Path "$pkgDir/*" -DestinationPath $zip -Force
          "zip_name=$zip" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Upload artifact (zip)
        uses: actions/upload-artifact@v4
        with:
          name: memos-windows-amd64
          path: |
            ${{ steps.package.outputs.zip_name }}

      - name: Release (on tag)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ steps.package.outputs.zip_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release (manual)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.release == 'true' && github.event.inputs.version != ''
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.version }}
          name: ${{ github.event.inputs.version }}
          files: |
            ${{ steps.package.outputs.zip_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


